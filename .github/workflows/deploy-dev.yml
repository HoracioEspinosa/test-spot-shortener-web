name: Deploy Dev (ECS)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPO: ${{ vars.DOCKER_IMAGE_REPO || 'docker.io' }}
  IMAGE_NAME: ${{ vars.DOCKER_IMAGE_NAME || 'spot2-frontend' }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.image.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 24.x

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Configure AWS credentials (for ECR)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push image to ECR
        id: build-image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: 323653590564.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/spot2-frontend-dev:${{ github.sha }}

      - name: Persist image tag
        id: image
        run: echo "tag=323653590564.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/spot2-frontend-dev:${{ github.sha }}" >> $GITHUB_OUTPUT

  terraform-apply:
    runs-on: ubuntu-latest
    needs: build-and-push
    env:
      IMAGE_TAG: ${{ needs.build-and-push.outputs.image_tag }}
      TF_VAR_aws_region: us-east-1
      TF_VAR_project_name: spot2-frontend-dev
      TF_INPUT: false
    defaults:
      run:
        working-directory: infra/terraform/dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Configure AWS credentials (DEV)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: ${{ env.AWS_REGION }}

      # 1) Descubrir backend ANTES
      - name: Discover backend public IP
        id: backend
        env:
          CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME_DEV }}
          SERVICE_NAME: ${{ secrets.ECS_BACKEND_SERVICE_NAME_DEV || 'spot2-backend-dev' }}
          AWS_REGION: ${{ env.AWS_REGION }}
          BACKEND_PORT: 3000
        run: |
          set -e
          TASK_ARN=$(aws ecs list-tasks --cluster "$CLUSTER_NAME" --service-name "$SERVICE_NAME" --region "$AWS_REGION" --query 'taskArns[0]' --output text)
          if [ "$TASK_ARN" = "None" ] || [ -z "$TASK_ARN" ]; then
            echo "No running tasks found for service $SERVICE_NAME" >&2
            exit 1
          fi
          ENI_ID=$(aws ecs describe-tasks --cluster "$CLUSTER_NAME" --tasks "$TASK_ARN" --region "$AWS_REGION" \
            --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text)
          PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids "$ENI_ID" --region "$AWS_REGION" \
            --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
          echo "url=http://$PUBLIC_IP:$BACKEND_PORT" >> "$GITHUB_OUTPUT"

      # 2) Escribir tfvars ANTES para que import/plan/apply ya vean variables
      - name: Write tfvars file (CI)
        run: |
          cat > tmp_rovodev_ci.auto.tfvars <<EOF
          aws_region = "us-east-1"
          project_name = "spot2-frontend-dev"
          cluster_name = "${{ secrets.ECS_CLUSTER_NAME_DEV }}"
          image_url = "${{ needs.build-and-push.outputs.image_tag }}"
          backend_url = "${{ steps.backend.outputs.url }}"
          EOF
          echo "Wrote tmp_rovodev_ci.auto.tfvars:" && cat tmp_rovodev_ci.auto.tfvars

      # 3) Ahora sí init
      - name: Terraform Init
        run: terraform init

      # 4) Import con variables ya válidas
      - name: Adopt existing static resources (import if present)
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          PROJECT_NAME: spot2-frontend-dev
          CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME_DEV }}
        run: |
          set -e
          echo "Adopting pre-existing resources for $PROJECT_NAME in $AWS_REGION"
          LOG_GROUP="/ecs/${PROJECT_NAME}"
          if aws logs describe-log-groups --log-group-name-prefix "$LOG_GROUP" --region "$AWS_REGION" --query 'logGroups[?logGroupName==`'$LOG_GROUP'`].logGroupName' --output text | grep -q "$LOG_GROUP"; then
            terraform import aws_cloudwatch_log_group.this "$LOG_GROUP" || true
          fi
          VPC_ID=$(aws ec2 describe-vpcs --filters Name=isDefault,Values=true --region "$AWS_REGION" --query 'Vpcs[0].VpcId' --output text 2>/dev/null || true)
          if [ -n "$VPC_ID" ] && [ "$VPC_ID" != "None" ]; then
            SG_ID=$(aws ec2 describe-security-groups --filters Name=group-name,Values="${PROJECT_NAME}-sg" Name=vpc-id,Values="$VPC_ID" --region "$AWS_REGION" --query 'SecurityGroups[0].GroupId' --output text 2>/dev/null || true)
            [ -n "$SG_ID" ] && [ "$SG_ID" != "None" ] && terraform import aws_security_group.svc "$SG_ID" || true
          fi
          if aws iam get-role --role-name "${PROJECT_NAME}-exec" >/dev/null 2>&1; then
            terraform import aws_iam_role.task_execution "${PROJECT_NAME}-exec" || true
          fi
          STATUS=$(aws ecs describe-services --cluster "$CLUSTER_NAME" --services "$PROJECT_NAME" --region "$AWS_REGION" --query 'services[0].status' --output text 2>/dev/null || true)
          if [ "$STATUS" = "ACTIVE" ]; then
            terraform import aws_ecs_service.this "${CLUSTER_NAME}/${PROJECT_NAME}" || true
          elif [ "$STATUS" = "DRAINING" ]; then
            for i in $(seq 1 60); do sleep 5; CUR=$(aws ecs describe-services --cluster "$CLUSTER_NAME" --services "$PROJECT_NAME" --region "$AWS_REGION" --query 'services[0].status' --output text 2>/dev/null || true); echo "status: $CUR"; [ "$CUR" != "DRAINING" ] && break; done
            CUR=$(aws ecs describe-services --cluster "$CLUSTER_NAME" --services "$PROJECT_NAME" --region "$AWS_REGION" --query 'services[0].status' --output text 2>/dev/null || true)
            [ "$CUR" = "ACTIVE" ] && terraform import aws_ecs_service.this "${CLUSTER_NAME}/${PROJECT_NAME}" || echo "Service not ACTIVE (status=$CUR)"
          else
            echo "ECS Service not found. Terraform will create it."
          fi

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Discover frontend public IP
        id: frontend
        env:
          CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME_DEV }}
          SERVICE_NAME: spot2-frontend-dev
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          set -e
          TASK_ARN=$(aws ecs list-tasks --cluster "$CLUSTER_NAME" --service-name "$SERVICE_NAME" --region "$AWS_REGION" --query 'taskArns[0]' --output text)
          if [ "$TASK_ARN" = "None" ] || [ -z "$TASK_ARN" ]; then
            echo "No running tasks found for service $SERVICE_NAME" >&2
            exit 1
          fi
          ENI_ID=$(aws ecs describe-tasks --cluster "$CLUSTER_NAME" --tasks "$TASK_ARN" --region "$AWS_REGION" \
            --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text)
          if [ -z "$ENI_ID" ]; then
            echo "Could not get ENI ID from task" >&2
            exit 1
          fi
          PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids "$ENI_ID" --region "$AWS_REGION" \
            --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
          if [ -z "$PUBLIC_IP" ] || [ "$PUBLIC_IP" = "None" ]; then
            echo "Task ENI has no Public IP. Ensure assign_public_ip=true." >&2
            exit 1
          fi
          echo "url=http://$PUBLIC_IP" >> "$GITHUB_OUTPUT"
          echo "Frontend URL: http://$PUBLIC_IP"

      - name: Post summary
        run: |
          echo "## Deploy Dev Result" >> $GITHUB_STEP_SUMMARY
          echo "- Image: ${{ env.IMAGE_TAG }}" >> $GITHUB_STEP_SUMMARY
          echo "- Backend URL: ${{ steps.backend.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend URL: ${{ steps.frontend.outputs.url }}" >> $GITHUB_STEP_SUMMARY

      - name: Notify Slack (optional)
        if: ${{ env.SLACK_WEBHOOK_URL != '' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          payload=$(jq -n \
            --arg text "Deploy Dev listo. Frontend: ${{ steps.frontend.outputs.url }} | Backend: ${{ steps.backend.outputs.url }} | Image: ${{ env.IMAGE_TAG }}" \
            '{text: $text}')
          curl -X POST -H 'Content-type: application/json' --data "$payload" "$SLACK_WEBHOOK_URL"
