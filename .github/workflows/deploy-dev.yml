name: Deploy Dev (ECS)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPO: ${{ vars.DOCKER_IMAGE_REPO || 'docker.io' }}
  IMAGE_NAME: ${{ vars.DOCKER_IMAGE_NAME || 'spot2-frontend' }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 24.x

      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Configure AWS credentials (for ECR)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push image to ECR
        id: build-image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: 323653590564.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/spot2-frontend-dev:${{ github.sha }}

      - name: Persist image tag
        id: image
        run: echo "tag=323653590564.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/spot2-frontend-dev:${{ github.sha }}" >> $GITHUB_OUTPUT

  terraform-apply:
    runs-on: ubuntu-latest
    needs: build-and-push
    defaults:
      run:
        working-directory: infra/terraform/dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Configure AWS credentials (DEV)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Discover backend public IP
        id: backend
        env:
          CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME_DEV }}
          SERVICE_NAME: ${{ secrets.ECS_BACKEND_SERVICE_NAME_DEV || 'spot2-backend-dev' }}
          AWS_REGION: ${{ env.AWS_REGION }}
          BACKEND_PORT: 3000
        run: |
          set -e
          TASK_ARN=$(aws ecs list-tasks --cluster "$CLUSTER_NAME" --service-name "$SERVICE_NAME" --region "$AWS_REGION" --query 'taskArns[0]' --output text)
          if [ "$TASK_ARN" = "None" ] || [ -z "$TASK_ARN" ]; then
            echo "No running tasks found for service $SERVICE_NAME" >&2
            exit 1
          fi
          ENI_ID=$(aws ecs describe-tasks --cluster "$CLUSTER_NAME" --tasks "$TASK_ARN" --region "$AWS_REGION" \
            --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text)
          if [ -z "$ENI_ID" ]; then
            echo "Could not get ENI ID from task" >&2
            exit 1
          fi
          PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids "$ENI_ID" --region "$AWS_REGION" \
            --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
          if [ -z "$PUBLIC_IP" ] || [ "$PUBLIC_IP" = "None" ]; then
            echo "Task ENI has no Public IP. Ensure assign_public_ip=true or expose via another method." >&2
            exit 1
          fi
          echo "url=http://$PUBLIC_IP:$BACKEND_PORT" >> "$GITHUB_OUTPUT"

      - name: Terraform Plan
        run: >-
          terraform plan
          -var="aws_region=${{ env.AWS_REGION }}"
          -var="project_name=spot2-frontend-dev"
          -var='cluster_name=${{ secrets.ECS_CLUSTER_NAME_DEV }}'
          -var='image_url=${{ steps.image.outputs.tag }}'
          -var='backend_url=${{ steps.backend.outputs.url }}'

      - name: Terraform Apply
        run: >-
          terraform apply -auto-approve
          -var="aws_region=${{ env.AWS_REGION }}"
          -var="project_name=spot2-frontend-dev"
          -var='cluster_name=${{ secrets.ECS_CLUSTER_NAME_DEV }}'
          -var='image_url=${{ steps.image.outputs.tag }}'
          -var='backend_url=${{ steps.backend.outputs.url }}'
